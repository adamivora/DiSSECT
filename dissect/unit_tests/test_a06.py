import unittest, ast
from dissect.traits.a06.a06 import a06_curve_function
from dissect.traits.example_curves import curves, curve_names
results={'secp112r2': {"{'deg': 2}": {'ratio_sqrt': 72213667414400864, 'factorization': [2, 2, 2, 2, 2, 11, 205152464245457]}}, 'bn158': {"{'deg': 2}": {'ratio_sqrt': 454233058419889982668807, 'factorization': [2953, 153820879925462235919]}}, 'brainpoolP160r1': {"{'deg': 2}": {'ratio_sqrt': 519972310379544251229703, 'factorization': [3023, 49277, 3490581720239293]}}}

class TestA06(unittest.TestCase):
 
    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest""" 
        params = ast.literal_eval(list(results["secp112r2"].keys())[0]).values()
        computed_result = a06_curve_function(curve_names["secp112r2"],*params)
        self.assertEqual(list(results["secp112r2"].values())[0],computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest""" 
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = a06_curve_function(curve_names["bn158"],*params)
        self.assertEqual(list(results["bn158"].values())[0],computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest""" 
        params = ast.literal_eval(list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = a06_curve_function(curve_names["brainpoolP160r1"],*params)
        self.assertEqual(list(results["brainpoolP160r1"].values())[0],computed_result)


if __name__ == '__main__':
   unittest.main()
   print("Everything passed")
