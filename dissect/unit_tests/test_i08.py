import unittest
import ast
from dissect.traits.i08.i08 import i08_curve_function
from dissect.traits.example_curves import curve_names
from dissect.utils.json_handler import FLOAT_PRECISION

results = {
    "secp112r2": {
        "{'k': 1}": {
            "Hx": 1534098225527667214992304222930499,
            "bits": 111,
            "difference": 1,
            "ratio": round(1.009090909090909, FLOAT_PRECISION),
        }
    },
    "bn158": {
        "{'k': 1}": {
            "Hx": 206327671360737302491015800744139033450591027218,
            "bits": 158,
            "difference": 0,
            "ratio": 1.0,
        }
    },
    "brainpoolP160r1": {
        "{'k': 1}": {
            "Hx": 1089473557631435284577962539738532515920566082499,
            "bits": 160,
            "difference": 0,
            "ratio": 1.0,
        }
    },
}


class TestI08(unittest.TestCase):
    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["secp112r2"].keys())[0]).values()
        computed_result = i08_curve_function(curve_names["secp112r2"], *params)
        self.assertEqual(list(results["secp112r2"].values())[0], computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = i08_curve_function(curve_names["bn158"], *params)
        self.assertEqual(list(results["bn158"].values())[0], computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = i08_curve_function(curve_names["brainpoolP160r1"], *params)
        self.assertEqual(list(results["brainpoolP160r1"].values())[0], computed_result)


if __name__ == "__main__":
    unittest.main()
    print("Everything passed")
