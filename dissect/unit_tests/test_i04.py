import unittest
import ast
from dissect.traits.i04.i04 import i04_curve_function
from dissect.traits.example_curves import curve_names

results = {
    "secp112r2": {
        "{'weight': 1}": {"x_coord_count": 48, "expected": 56, "ratio": 1.16667}
    },
    "bn158": {"{'weight': 1}": {"x_coord_count": 92, "expected": 79, "ratio": 0.8587}},
    "brainpoolP160r1": {
        "{'weight': 1}": {"x_coord_count": 74, "expected": 80, "ratio": 1.08108}
    },
}


class TestI04(unittest.TestCase):
    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["secp112r2"].keys())[0]).values()
        computed_result = i04_curve_function(curve_names["secp112r2"], *params)
        self.assertEqual(list(results["secp112r2"].values())[0], computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = i04_curve_function(curve_names["bn158"], *params)
        self.assertEqual(list(results["bn158"].values())[0], computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = i04_curve_function(curve_names["brainpoolP160r1"], *params)
        self.assertEqual(list(results["brainpoolP160r1"].values())[0], computed_result)


if __name__ == "__main__":
    unittest.main()
    print("Everything passed")
