import unittest
import ast
from dissect.traits.i15.i15 import i15_curve_function
from dissect.traits.example_curves import curve_names
results = {
    'secp112r2': {
        '{}': {
            'a': 1970543761890640310119143205433388,
            'b': 1660538572255285715897238774208265}},
    'bn158': {
        '{}': {
            'a': 0,
            'b': 17}},
    'brainpoolP160r1': {
        '{}': {
            'a': 297190522446607939568481567949428902921613329152,
            'b': 173245649450172891208247283053495198538671808088}}}


class TestI15(unittest.TestCase):

    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["secp112r2"].keys())[0]).values()
        computed_result = i15_curve_function(curve_names["secp112r2"], *params)
        self.assertEqual(
            list(
                results["secp112r2"].values())[0],
            computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = i15_curve_function(curve_names["bn158"], *params)
        self.assertEqual(list(results["bn158"].values())[0], computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = i15_curve_function(
            curve_names["brainpoolP160r1"], *params)
        self.assertEqual(
            list(
                results["brainpoolP160r1"].values())[0],
            computed_result)


if __name__ == '__main__':
    unittest.main()
    print("Everything passed")
