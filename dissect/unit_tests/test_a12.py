import unittest, ast
from dissect.traits.a12.a12 import a12_curve_function
from dissect.traits.example_curves import curves, curve_names
results={'secp112r2': {"{'l': 2}": {'order': None, 'complement_bit_length': None}}, 'bn158': {"{'l': 2}": {'order': 68775890453579100830338448837026871186869452804, 'complement_bit_length': 2}}, 'brainpoolP160r1': {"{'l': 2}": {'order': 333074399610011218706771259707545341053235642114, 'complement_bit_length': 3}}}

class TestA12(unittest.TestCase):
 
    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest""" 
        params = ast.literal_eval(list(results["secp112r2"].keys())[0]).values()
        computed_result = a12_curve_function(curve_names["secp112r2"],*params)
        self.assertEqual(list(results["secp112r2"].values())[0],computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest""" 
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = a12_curve_function(curve_names["bn158"],*params)
        self.assertEqual(list(results["bn158"].values())[0],computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest""" 
        params = ast.literal_eval(list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = a12_curve_function(curve_names["brainpoolP160r1"],*params)
        self.assertEqual(list(results["brainpoolP160r1"].values())[0],computed_result)


if __name__ == '__main__':
   unittest.main()
   print("Everything passed")
