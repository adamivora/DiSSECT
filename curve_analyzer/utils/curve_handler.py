from curve_analyzer.definitions import CURVE_PATH
from curve_analyzer.utils.custom_curve import CustomCurve
from sage.all import ZZ
import json
import os
import re


# Generates a dictionary with keys = sources of curves (secg, gost,...) and values = dictionaries
# These dictionaries contain description and a list of all curves from corresponding source
# Curves must be in the folder CURVE_PATH
# The flag ignore_sim is used for ignoring simulated curves
def import_curve_db(root=CURVE_PATH, ignore_sim=True):
    curve_db = {}
    for path, dirs, files in os.walk(root):
        if dirs != [] and '.ipynb_checkpoints' not in dirs:
            continue
        source = path.split("/")[-1]
        suffix = ""
        for file in files:
            if os.path.splitext(file)[-1] != ".json":
                continue

            if "sim" in path:
                if ignore_sim:
                    continue
                suffix = "-" + str(re.findall(r'\d+', file)[0])
            with open(os.path.join(path, file)) as f:
                curve_db[source + suffix] = json.load(f)
    return curve_db


# Yields instances of the class CustomCurve from the dictionary generated by import_curve_db
# Curves can be specified by order_bound or curve_type: simulated (sim), standard (std) or sample (smp)
def curve_gen(curve_db, curve_type, order_bound, verbose, binary, extension, single_curve):
    sources = curve_db.keys()
    for source in sources:
        curves = curve_db[source]['curves']
        for curve in curves:
            if not binary and curve["field"]["type"] == "Binary":
                continue
            if not extension and curve["field"]["type"] == "Extension":
                continue
            if single_curve != "" and curve["name"] != single_curve:
                continue
            if ZZ(curve['order']).nbits() > order_bound:
                continue
            name = curve['name']
            if curve_type == "std" and "sim" in name:
                continue
            if curve_type == "sim" and not "sim" in name:
                continue
            if curve_type == "sample" and not name in ["secp112r1", "secp192r1", "secp256r1"]:
                continue
            if verbose:
                print(curve['name'])
            yield CustomCurve(curve)


# Makes a list from the result of curve_gen
def custom_curves(curve_db, curve_type, order_bound, verbose, binary, extension, single_curve):
    return [c for c in curve_gen(curve_db, curve_type, order_bound, verbose, binary, extension, single_curve)]


# Creates a list of instances of class CustomCurve out of imported database (conditioned by curve_type, see above)
def import_curves(curve_type="sample", order_bound=256, verbose=False, binary = False, extension = False, single_curve = ""):
    if single_curve != "":
        print("Importing " + single_curve)
    else:
        print("Importing " + curve_type + " curves of sizes up to " + str(order_bound) + " bits from the database...")
    ignore_sim = True
    if curve_type in ["sim", "all"]:
        ignore_sim = False
    curve_db = import_curve_db(CURVE_PATH, ignore_sim)
    curve_list = sorted(custom_curves(curve_db, curve_type, order_bound, verbose, binary, extension, single_curve), key=lambda item: item.order)
    return curve_list
