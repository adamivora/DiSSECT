import ast
import unittest

from curve_analyzer.traits.a25.a25 import a25_curve_function
from curve_analyzer.traits.example_curves import curve_names

key = "{'deg': 1}"
results = {'secp112r2': {
    key: {'trace': 72213667414400864, 'trace_factorization': [[2, 5], [11, 1], [205152464245457, 1]],
          'number_of_factors': 3}}, 'bn158': {
    key: {'trace': 454233058419889982668807, 'trace_factorization': [[2953, 1], [153820879925462235919, 1]],
          'number_of_factors': 2}}, 'brainpoolP160r1': {
    key: {'trace': 519972310379544251229703, 'trace_factorization': [[3023, 1], [49277, 1], [3490581720239293, 1]],
          'number_of_factors': 3}}}


class TestA25(unittest.TestCase):

    def test_auto_generated_secp112r2(self):
        '''This test has been auto-generated by gen_unittest'''
        params = ast.literal_eval(list(results["secp112r2"].keys())[0]).values()
        computed_result = a25_curve_function(curve_names["secp112r2"], *params)
        self.assertEqual(computed_result, list(results["secp112r2"].values())[0])

    def test_auto_generated_bn158(self):
        '''This test has been auto-generated by gen_unittest'''
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = a25_curve_function(curve_names["bn158"], *params)
        self.assertEqual(computed_result, list(results["bn158"].values())[0])

    def test_auto_generated_brainpoolP160r1(self):
        '''This test has been auto-generated by gen_unittest'''
        params = ast.literal_eval(list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = a25_curve_function(curve_names["brainpoolP160r1"], *params)
        self.assertEqual(computed_result, list(results["brainpoolP160r1"].values())[0])


if __name__ == '__main__':
    unittest.main()
    print("Everything passed")
